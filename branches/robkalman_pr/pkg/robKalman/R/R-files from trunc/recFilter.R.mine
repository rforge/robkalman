


recursiveFilter <- function(Y, a, S, F, Q, Z, V, 
                   initSc=.cKinitstep, predSc=.cKpredstep, corrSc=.cKcorrstep, 
                   initSr=NULL, predSr=NULL, corrSr=NULL, ...)# a generalization of the Kalmanfilter
#arguments: 
# +  Y               :observations
# +  a, S, F, Q, Z, V: Hyper-parameters of the ssm
# +  initSc, predSc, corrSc:  (classical) initialization-, prediction-, and correction-step function
# +  initSr, predSr, corrSr:  (robust) initialization-, prediction-, and correction-step function
# +  robustIO: if TRUE indicators are recorded whether prediction step does clipping
# +  robustAO: if TRUE indicators are recorded whether correction step does clipping
#    if (robustIO|)
# +  ... additional arguments for initS, predS, corrS
{qd <- ifelse(length(Z)==1, 1, (dim(Y))[1])
 pd <- length(a)
 tt <- ifelse(length(Z)==1, length(Y), (dim(Y))[2])
# browser()
 IndIO <- NULL
 IndAO <- NULL

 robust <- !(is.null(initSr)&&is.null(predSr)&&is.null(corrSr))
 
 Xf  <- matrix(0, length(a), tt + 1)
 Xp  <- matrix(0, length(a), tt)
 St0 <- array(0, c(pd, pd, tt + 1))
 St1 <- array(0, c(pd, pd, tt))
 KG  <- array(0, c(pd, qd, tt))
 
 
 if(robust)
    {Xrf <- matrix(0, length(a), tt + 1)
     Xrp <- matrix(0, length(a), tt)
     Str0 <- array(0, c(pd, pd, tt + 1))
     Str1 <- array(0, c(pd, pd, tt))
     KGr  <- array(0, c(pd, qd, tt))
    }

 if(!is.null(predSr))
     IndIO <- numeric(tt)

 if(!is.null(corrSr))
     IndAO <- numeric(tt)
 
 ini <- initSc(a, S, ...)
 x0  <- ini$x0
 S0  <- ini$S0

 Xf[, 1] <- ini$x0
 St0[, , 1] <- ini$S0
 
 if(robust)
      {if(!is.null(initSr))
           {inir <- initSr(a, S, ...)
            xr0  <- inir$x0
            Sr0  <- inir$S0
            rob0  <- inir$rob
           }          
       else
           {
            xr0  <- x0
            Sr0  <- S0
            rob0  <- NULL
           }          
       Xrf[, 1] <- xr0
       Str0[,, 1] <- xr0
       rob0L <- list(rob0)  
       
      }
 else{Xrf <- NULL
      Xrp <- NULL
      Str0 <- NULL
      Str1 <- NULL
      KGr <- NULL
      rob0L <- NULL
      rob1L <- NULL
     }
 for (i in (1:tt))
     {#prediction
      ps  <- predSc(x0=x0, S0=S0, F=F, Q=Q, ...)
      x1  <- ps$x1
      S1  <- ps$S1
      
      Xp[, i]   <- x1
      St1[,, i] <- S1


      if(robust)
          {if(!is.null(predSr))
               {psr <- predSr(x0 = xr0, S0 = Sr0, F = F, Q = Q, ..., rob0 = rob0)
                IndIO[i]  <- psr$Ind} 
           else
                psr <- predSc(x0 = xr0, S0 = Sr0, F = F, Q = Q, ...)


           xr1       <- psr$x1
           Sr1       <- psr$S1
           rob1      <- psr$rob1     
           
           Xrp[, i]  <- xr1
           Str1[,, i]<- S1
           if(i==1)  rob1L <- list(rob1)
           else      rob1L[[i]] <- rob1
        }


      #correction
      cs <- corrSc(y = Y[, i], x1 = x1, S1 = S1, Z = Z, V = V, ...)
      x0 <- cs$x0
      S0 <- cs$S0
      
      Xf[,  i + 1]  <- x0
      St0[,, i + 1] <- S0
      KG[,,  i]     <- cs$K
      
      if(robust)
          {if (!is.null(corrSr))
                {csr <- corrSr(y = Y[, i], x1 = xr1, S1 = Sr1, Z = Z, V = V, ..., rob1 = rob1)
                 IndAO[i]  <- csr$Ind }
           else
                csr <- corrSc(y = Y[, i], x1 = xr1, S1 = Sr1, Z = Z, V = V, ...)
                
           xr0       <- csr$x0
           Sr0       <- csr$S0
           rob0      <- csr$rob0     

           Xrf[, i + 1]   <- xr0
           Str0[,, i + 1] <- S0
           rob0L[[i + 1]] <- rob0     
           KGr[,, i]      <- csr$K
          }
 }


list(Xf = Xf, Xp = Xp, Xrf = Xrf, Xrp = Xrp, 
     S0 = St0, S1 = St1, KG = KG,
     Sr0 = Str0, Sr1 = Str1, 
     KGr = KGr, IndIO = IndIO, IndAO = IndAO,
     rob0L = rob0L, rob1L = rob1L)
           
}


######################################################
# simple wrappers:
######################################################

KalmanFilter <- function(Y, a, S, F, Q, Z, V)#
#arguments: 
# +  Y               :observations
# +  a, S, F, Q, Z, V:Hyper-parameters of the ssm
{recursiveFilter(Y, a, S, F, Q, Z, V)}

rLSFilter <- function(Y, a, S, F, Q, Z, V, b, norm=Euclidnorm)#
#arguments: 
# +  Y               :observations
# +  a, S, F, Q, Z, V:Hyper-parameters of the ssm
# +  b               :clipping height
{recursiveFilter(Y, a, S, F, Q, Z, V, initSc=.cKinitstep, predSc=.cKpredstep, corrSc=.cKcorrstep, 
                 #initSr=NULL, predSr=NULL,
                 initSr=.cKinitstep, predSr=.cKpredstep, 
                 corrSr=.rLScorrstep, b=b, norm=norm)}


ACMfilter <- function(Y, a, S, F, Q, Z, V, s0, psi, apsi, bpsi, cpsi, flag)#
#arguments: 
# +  Y               :observations
# +  a, S, F, Q, Z, V:Hyper-parameters of the ssm
# +  b               :clippingheight 
##  Y=x ... observed time series 
##  a=m0 ... unconditional mean
##  S=Cx ... covariance matrix
##  F=Phi ... design matrix of state equation 
##  Q ... covariance matrix of state innovation process
##  Z=H ... observation matrix
##  V ... covariance matrix of observation noise
##  s0 ... scale of nominal Gaussian component of additive noise
##  psi ... influence function to be used (default: Hampel's psi function, 
##          only that is available at the moment)
##  apsi, bpsi, cpsi ... tuning constants for Hampel's psi-function
##              (default: a=b=2.5, c=5.0)
##  flag ... character, if "weights" (default), use psi(t)/t to calculate 
##           the weights; if "deriv", use psi'(t)
{recursiveFilter(Y, a, S, F, Q, Z, V, initSc=.cKinitstep, predSc=.cKpredstep, corrSc=.cKcorrstep, 
                 initSr=.cKinitstep, predSr=.ACMpredstep, corrSr=.ACMcorrstep, s0, psi, 
                 apsi=2.5, bpsi=2.5, cpsi=5.0, flag)}
###########################################
##
##  R-function: ACMfilter - approximate conditional-mean filtering
##  author: Bernhard Spangl
##  version: 1.0 (2006-05-21)
##
###########################################

##  Paramters:
##  Y=x ... observed time series 
##  a=m0 ... unconditional mean
##  S=Cx ... covariance matrix
##  F=Phi ... design matrix of state equation 
##  Q ... covariance matrix of state innovation process
##  Z=H ... observation matrix
##  V ... covariance matrix of observation noise
##  s0 ... scale of nominal Gaussian component of additive noise
##  psi ... influence function to be used (default: Hampel's psi function, 
##          only that is available at the moment)
##  a, b, c ... tuning constants for Hampel's psi-function
##              (defaul: a=b=2.5, c=5.0)
##  flag ... character, if "weights" (default), use psi(t)/t to calculate 
##           the weights; if "deriv", use psi'(t)
